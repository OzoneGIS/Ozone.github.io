{"version":3,"file":"remove.js","sourceRoot":"","sources":["../../../../src/database/list/remove.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,UAAU,CAAC;AAM/C,MAAM,6BAA6B,GAAsB;IACvD,MAAM,CAAC,gBAAgB,IAAwB;QAC7C,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;SAAE;QAClC,MAAM,CAAC,mBAAmB,CAAC,IAAI,EAAE;YAC/B,UAAU,EAAE,cAAM,OAAA,GAAG,CAAC,KAAK,CAAS,IAAI,CAAC,CAAC,MAAM,EAAE,EAAhC,CAAgC;YAClD,YAAY,EAAE,cAAM,OAAoB,IAAK,CAAC,MAAM,EAAE,EAAlC,CAAkC;YACtD,YAAY,EAAE,cAAM,OAAmB,IAAK,CAAC,GAAG,CAAC,MAAM,EAAE,EAArC,CAAqC;SAC1D,CAAC,CAAC;KACJ,CAAA;CACF","sourcesContent":["import { DatabaseReference, FirebaseOperation, DatabaseSnapshot } from '../interfaces';\nimport { checkOperationCases } from '../utils';\nimport { createDataOperationMethod } from './data-operation';\nimport { DataSnapshot, Reference } from '@firebase/database-types';\n\n// TODO(davideast): Find out why TS thinks this returns firebase.Primise\n// instead of Promise.\nexport function createRemoveMethod(ref: DatabaseReference) {\n  return function remove(item?: FirebaseOperation): any {\n    if(!item) { return ref.remove(); }\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(<string>item).remove(),\n      firebaseCase: () => (<DatabaseReference>item).remove(),\n      snapshotCase: () => (<DatabaseSnapshot>item).ref.remove()\n    });\n  }\n}\n"]}