{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/database/utils.ts"],"names":[],"mappings":"AAMA,MAAM,mBAAmB,KAAU;IACjC,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC;CAClC;AAED,MAAM,iCAAiC,KAAU;IAC/C,MAAM,CAAC,OAAO,KAAK,CAAC,SAAS,KAAK,UAAU,CAAC;CAC9C;AAED,MAAM,gBAAgB,GAAQ;IAC5B,MAAM,CAAC,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,CAAC;CAC1C;AAED,MAAM,wBAAwB,KAAU;IACtC,MAAM,CAAC,OAAO,KAAK,CAAC,GAAG,KAAK,UAAU,CAAC;CACxC;AAQD,MAAM,iBAAiB,GAAgB,EAAE,OAAsB;IAE7D,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,OAA4B;UACxD,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,OAAiB,CAAC,CAAC;CAC3C;AAED,MAAM,8BAA8B,IAAuB,EAAE,KAA6B;IACxF,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;KAC3B;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,KAAK,CAAC,YAAa,EAAE,CAAC;KAC9B;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,YAAa,EAAE,CAAC;KAC9B;IACD,MAAM,IAAI,KAAK,CAAC,kDAAkD,OAAO,IAAI,EAAE,CAAC,CAAC;CAClF","sourcesContent":["import { Subscription } from 'rxjs/Subscription';\nimport { Scheduler } from 'rxjs/Scheduler';\nimport { queue } from 'rxjs/scheduler/queue';\nimport { PathReference, DatabaseReference, FirebaseOperation, FirebaseOperationCases } from './interfaces';\nimport { FirebaseApp } from 'angularfire2';\n\nexport function isString(value: any): boolean {\n  return typeof value === 'string';\n}\n\nexport function isFirebaseDataSnapshot(value: any): boolean {\n  return typeof value.exportVal === 'function';\n}\n\nexport function isNil(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isFirebaseRef(value: any): boolean {\n  return typeof value.set === 'function';\n}\n\n/**\n * Returns a database reference given a Firebase App and an\n * absolute or relative path.\n * @param app - Firebase App\n * @param path - Database path, relative or absolute\n */\nexport function getRef(app: FirebaseApp, pathRef: PathReference): DatabaseReference {\n  // if a db ref was passed in, just return it\n  return isFirebaseRef(pathRef) ? pathRef as DatabaseReference\n    : app.database().ref(pathRef as string);\n}\n\nexport function checkOperationCases(item: FirebaseOperation, cases: FirebaseOperationCases) : Promise<void> {\n  if (isString(item)) {\n    return cases.stringCase();\n  } else if (isFirebaseRef(item)) {\n    return cases.firebaseCase!();\n  } else if (isFirebaseDataSnapshot(item)) {\n    return cases.snapshotCase!();\n  }\n  throw new Error(`Expects a string, snapshot, or reference. Got: ${typeof item}`);\n}\n"]}